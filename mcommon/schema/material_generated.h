// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MATERIAL_MGEO_H_
#define FLATBUFFERS_GENERATED_MATERIAL_MGEO_H_

#include "flatbuffers/flatbuffers.h"

#include "glm/glm.hpp"
#include "common_generated.h"

namespace MGeo {

struct Material;

struct Material FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "MGeo.Material";
  }
  enum {
    VT_NAME = 4,
    VT_DIFFUSE = 6,
    VT_SPECULAR = 8,
    VT_AMBIENT = 10,
    VT_EMISSIVE = 12,
    VT_TRANSPARENT = 14,
    VT_OPACITY = 16,
    VT_SPECULARSTRENGTH = 18,
    VT_DIFFUSETEX = 20,
    VT_SPECULARTEX = 22,
    VT_EMISSIVETEX = 24,
    VT_NORMALTEX = 26,
    VT_LIGHTMAPTEX = 28,
    VT_REFLECTIONTEX = 30,
    VT_HEIGHTTEX = 32,
    VT_SHINYTEX = 34,
    VT_AMBIENTTEX = 36,
    VT_DISPLACEMENTTEX = 38
  };
  const flatbuffers::String *Name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const MGeo::vec3 *Diffuse() const {
    return GetStruct<const MGeo::vec3 *>(VT_DIFFUSE);
  }
  const MGeo::vec4 *Specular() const {
    return GetStruct<const MGeo::vec4 *>(VT_SPECULAR);
  }
  const MGeo::vec3 *Ambient() const {
    return GetStruct<const MGeo::vec3 *>(VT_AMBIENT);
  }
  const MGeo::vec3 *Emissive() const {
    return GetStruct<const MGeo::vec3 *>(VT_EMISSIVE);
  }
  const MGeo::vec3 *Transparent() const {
    return GetStruct<const MGeo::vec3 *>(VT_TRANSPARENT);
  }
  float Opacity() const {
    return GetField<float>(VT_OPACITY, 0.0f);
  }
  float SpecularStrength() const {
    return GetField<float>(VT_SPECULARSTRENGTH, 0.0f);
  }
  const flatbuffers::String *DiffuseTex() const {
    return GetPointer<const flatbuffers::String *>(VT_DIFFUSETEX);
  }
  const flatbuffers::String *SpecularTex() const {
    return GetPointer<const flatbuffers::String *>(VT_SPECULARTEX);
  }
  const flatbuffers::String *EmissiveTex() const {
    return GetPointer<const flatbuffers::String *>(VT_EMISSIVETEX);
  }
  const flatbuffers::String *NormalTex() const {
    return GetPointer<const flatbuffers::String *>(VT_NORMALTEX);
  }
  const flatbuffers::String *LightMapTex() const {
    return GetPointer<const flatbuffers::String *>(VT_LIGHTMAPTEX);
  }
  const flatbuffers::String *ReflectionTex() const {
    return GetPointer<const flatbuffers::String *>(VT_REFLECTIONTEX);
  }
  const flatbuffers::String *HeightTex() const {
    return GetPointer<const flatbuffers::String *>(VT_HEIGHTTEX);
  }
  const flatbuffers::String *ShinyTex() const {
    return GetPointer<const flatbuffers::String *>(VT_SHINYTEX);
  }
  const flatbuffers::String *AmbientTex() const {
    return GetPointer<const flatbuffers::String *>(VT_AMBIENTTEX);
  }
  const flatbuffers::String *DisplacementTex() const {
    return GetPointer<const flatbuffers::String *>(VT_DISPLACEMENTTEX);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(Name()) &&
           VerifyField<MGeo::vec3>(verifier, VT_DIFFUSE) &&
           VerifyField<MGeo::vec4>(verifier, VT_SPECULAR) &&
           VerifyField<MGeo::vec3>(verifier, VT_AMBIENT) &&
           VerifyField<MGeo::vec3>(verifier, VT_EMISSIVE) &&
           VerifyField<MGeo::vec3>(verifier, VT_TRANSPARENT) &&
           VerifyField<float>(verifier, VT_OPACITY) &&
           VerifyField<float>(verifier, VT_SPECULARSTRENGTH) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DIFFUSETEX) &&
           verifier.Verify(DiffuseTex()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SPECULARTEX) &&
           verifier.Verify(SpecularTex()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_EMISSIVETEX) &&
           verifier.Verify(EmissiveTex()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NORMALTEX) &&
           verifier.Verify(NormalTex()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_LIGHTMAPTEX) &&
           verifier.Verify(LightMapTex()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_REFLECTIONTEX) &&
           verifier.Verify(ReflectionTex()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_HEIGHTTEX) &&
           verifier.Verify(HeightTex()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SHINYTEX) &&
           verifier.Verify(ShinyTex()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_AMBIENTTEX) &&
           verifier.Verify(AmbientTex()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DISPLACEMENTTEX) &&
           verifier.Verify(DisplacementTex()) &&
           verifier.EndTable();
  }
};

struct MaterialBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Name(flatbuffers::Offset<flatbuffers::String> Name) {
    fbb_.AddOffset(Material::VT_NAME, Name);
  }
  void add_Diffuse(const MGeo::vec3 *Diffuse) {
    fbb_.AddStruct(Material::VT_DIFFUSE, Diffuse);
  }
  void add_Specular(const MGeo::vec4 *Specular) {
    fbb_.AddStruct(Material::VT_SPECULAR, Specular);
  }
  void add_Ambient(const MGeo::vec3 *Ambient) {
    fbb_.AddStruct(Material::VT_AMBIENT, Ambient);
  }
  void add_Emissive(const MGeo::vec3 *Emissive) {
    fbb_.AddStruct(Material::VT_EMISSIVE, Emissive);
  }
  void add_Transparent(const MGeo::vec3 *Transparent) {
    fbb_.AddStruct(Material::VT_TRANSPARENT, Transparent);
  }
  void add_Opacity(float Opacity) {
    fbb_.AddElement<float>(Material::VT_OPACITY, Opacity, 0.0f);
  }
  void add_SpecularStrength(float SpecularStrength) {
    fbb_.AddElement<float>(Material::VT_SPECULARSTRENGTH, SpecularStrength, 0.0f);
  }
  void add_DiffuseTex(flatbuffers::Offset<flatbuffers::String> DiffuseTex) {
    fbb_.AddOffset(Material::VT_DIFFUSETEX, DiffuseTex);
  }
  void add_SpecularTex(flatbuffers::Offset<flatbuffers::String> SpecularTex) {
    fbb_.AddOffset(Material::VT_SPECULARTEX, SpecularTex);
  }
  void add_EmissiveTex(flatbuffers::Offset<flatbuffers::String> EmissiveTex) {
    fbb_.AddOffset(Material::VT_EMISSIVETEX, EmissiveTex);
  }
  void add_NormalTex(flatbuffers::Offset<flatbuffers::String> NormalTex) {
    fbb_.AddOffset(Material::VT_NORMALTEX, NormalTex);
  }
  void add_LightMapTex(flatbuffers::Offset<flatbuffers::String> LightMapTex) {
    fbb_.AddOffset(Material::VT_LIGHTMAPTEX, LightMapTex);
  }
  void add_ReflectionTex(flatbuffers::Offset<flatbuffers::String> ReflectionTex) {
    fbb_.AddOffset(Material::VT_REFLECTIONTEX, ReflectionTex);
  }
  void add_HeightTex(flatbuffers::Offset<flatbuffers::String> HeightTex) {
    fbb_.AddOffset(Material::VT_HEIGHTTEX, HeightTex);
  }
  void add_ShinyTex(flatbuffers::Offset<flatbuffers::String> ShinyTex) {
    fbb_.AddOffset(Material::VT_SHINYTEX, ShinyTex);
  }
  void add_AmbientTex(flatbuffers::Offset<flatbuffers::String> AmbientTex) {
    fbb_.AddOffset(Material::VT_AMBIENTTEX, AmbientTex);
  }
  void add_DisplacementTex(flatbuffers::Offset<flatbuffers::String> DisplacementTex) {
    fbb_.AddOffset(Material::VT_DISPLACEMENTTEX, DisplacementTex);
  }
  MaterialBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MaterialBuilder &operator=(const MaterialBuilder &);
  flatbuffers::Offset<Material> Finish() {
    const auto end = fbb_.EndTable(start_, 18);
    auto o = flatbuffers::Offset<Material>(end);
    return o;
  }
};

inline flatbuffers::Offset<Material> CreateMaterial(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> Name = 0,
    const MGeo::vec3 *Diffuse = 0,
    const MGeo::vec4 *Specular = 0,
    const MGeo::vec3 *Ambient = 0,
    const MGeo::vec3 *Emissive = 0,
    const MGeo::vec3 *Transparent = 0,
    float Opacity = 0.0f,
    float SpecularStrength = 0.0f,
    flatbuffers::Offset<flatbuffers::String> DiffuseTex = 0,
    flatbuffers::Offset<flatbuffers::String> SpecularTex = 0,
    flatbuffers::Offset<flatbuffers::String> EmissiveTex = 0,
    flatbuffers::Offset<flatbuffers::String> NormalTex = 0,
    flatbuffers::Offset<flatbuffers::String> LightMapTex = 0,
    flatbuffers::Offset<flatbuffers::String> ReflectionTex = 0,
    flatbuffers::Offset<flatbuffers::String> HeightTex = 0,
    flatbuffers::Offset<flatbuffers::String> ShinyTex = 0,
    flatbuffers::Offset<flatbuffers::String> AmbientTex = 0,
    flatbuffers::Offset<flatbuffers::String> DisplacementTex = 0) {
  MaterialBuilder builder_(_fbb);
  builder_.add_DisplacementTex(DisplacementTex);
  builder_.add_AmbientTex(AmbientTex);
  builder_.add_ShinyTex(ShinyTex);
  builder_.add_HeightTex(HeightTex);
  builder_.add_ReflectionTex(ReflectionTex);
  builder_.add_LightMapTex(LightMapTex);
  builder_.add_NormalTex(NormalTex);
  builder_.add_EmissiveTex(EmissiveTex);
  builder_.add_SpecularTex(SpecularTex);
  builder_.add_DiffuseTex(DiffuseTex);
  builder_.add_SpecularStrength(SpecularStrength);
  builder_.add_Opacity(Opacity);
  builder_.add_Transparent(Transparent);
  builder_.add_Emissive(Emissive);
  builder_.add_Ambient(Ambient);
  builder_.add_Specular(Specular);
  builder_.add_Diffuse(Diffuse);
  builder_.add_Name(Name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Material> CreateMaterialDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *Name = nullptr,
    const MGeo::vec3 *Diffuse = 0,
    const MGeo::vec4 *Specular = 0,
    const MGeo::vec3 *Ambient = 0,
    const MGeo::vec3 *Emissive = 0,
    const MGeo::vec3 *Transparent = 0,
    float Opacity = 0.0f,
    float SpecularStrength = 0.0f,
    const char *DiffuseTex = nullptr,
    const char *SpecularTex = nullptr,
    const char *EmissiveTex = nullptr,
    const char *NormalTex = nullptr,
    const char *LightMapTex = nullptr,
    const char *ReflectionTex = nullptr,
    const char *HeightTex = nullptr,
    const char *ShinyTex = nullptr,
    const char *AmbientTex = nullptr,
    const char *DisplacementTex = nullptr) {
  return MGeo::CreateMaterial(
      _fbb,
      Name ? _fbb.CreateString(Name) : 0,
      Diffuse,
      Specular,
      Ambient,
      Emissive,
      Transparent,
      Opacity,
      SpecularStrength,
      DiffuseTex ? _fbb.CreateString(DiffuseTex) : 0,
      SpecularTex ? _fbb.CreateString(SpecularTex) : 0,
      EmissiveTex ? _fbb.CreateString(EmissiveTex) : 0,
      NormalTex ? _fbb.CreateString(NormalTex) : 0,
      LightMapTex ? _fbb.CreateString(LightMapTex) : 0,
      ReflectionTex ? _fbb.CreateString(ReflectionTex) : 0,
      HeightTex ? _fbb.CreateString(HeightTex) : 0,
      ShinyTex ? _fbb.CreateString(ShinyTex) : 0,
      AmbientTex ? _fbb.CreateString(AmbientTex) : 0,
      DisplacementTex ? _fbb.CreateString(DisplacementTex) : 0);
}

}  // namespace MGeo

#endif  // FLATBUFFERS_GENERATED_MATERIAL_MGEO_H_
