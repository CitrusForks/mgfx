// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MODEL_MGEO_H_
#define FLATBUFFERS_GENERATED_MODEL_MGEO_H_

#include "flatbuffers/flatbuffers.h"

#define GLM_FORCE_LEFT_HANDED
#include "glm/glm.hpp"
#include "common_generated.h"
#include "material_generated.h"

namespace MGeo {

struct Mesh;

struct Model;

enum class MeshVersion : uint16_t {
  CurrentMeshVersion = 1,
  MIN = CurrentMeshVersion,
  MAX = CurrentMeshVersion
};

inline const char **EnumNamesMeshVersion() {
  static const char *names[] = {
    "CurrentMeshVersion",
    nullptr
  };
  return names;
}

inline const char *EnumNameMeshVersion(MeshVersion e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(MeshVersion::CurrentMeshVersion);
  return EnumNamesMeshVersion()[index];
}

enum class MeshColors : uint16_t {
  MaxColors = 8,
  MIN = MaxColors,
  MAX = MaxColors
};

inline const char **EnumNamesMeshColors() {
  static const char *names[] = {
    "MaxColors",
    nullptr
  };
  return names;
}

inline const char *EnumNameMeshColors(MeshColors e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(MeshColors::MaxColors);
  return EnumNamesMeshColors()[index];
}

enum class MeshTexCoords : uint16_t {
  MaxTexCoords = 8,
  MIN = MaxTexCoords,
  MAX = MaxTexCoords
};

inline const char **EnumNamesMeshTexCoords() {
  static const char *names[] = {
    "MaxTexCoords",
    nullptr
  };
  return names;
}

inline const char *EnumNameMeshTexCoords(MeshTexCoords e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(MeshTexCoords::MaxTexCoords);
  return EnumNamesMeshTexCoords()[index];
}

struct Mesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "MGeo.Mesh";
  }
  enum {
    VT_BOUNDINGBOX = 4,
    VT_VERTICES = 6,
    VT_NORMALS = 8,
    VT_TANGENTS = 10,
    VT_BINORMALS = 12,
    VT_COLORS0 = 14,
    VT_COLORS1 = 16,
    VT_COLORS2 = 18,
    VT_COLORS3 = 20,
    VT_COLORS4 = 22,
    VT_COLORS5 = 24,
    VT_COLORS6 = 26,
    VT_COLORS7 = 28,
    VT_TEXCOORDS0 = 30,
    VT_TEXCOORDS1 = 32,
    VT_TEXCOORDS2 = 34,
    VT_TEXCOORDS3 = 36,
    VT_TEXCOORDS4 = 38,
    VT_TEXCOORDS5 = 40,
    VT_TEXCOORDS6 = 42,
    VT_TEXCOORDS7 = 44,
    VT_INDICES = 46,
    VT_BONEINDICES = 48,
    VT_BONEWEIGHTS = 50,
    VT_BONETRANSFORMS = 52,
    VT_BONEPARENTS = 54,
    VT_MATERIALINDEX = 56,
    VT_TEXCOORD_DIMENSION = 58
  };
  const MGeo::Bounds *BoundingBox() const {
    return GetStruct<const MGeo::Bounds *>(VT_BOUNDINGBOX);
  }
  const flatbuffers::Vector<float> *Vertices() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_VERTICES);
  }
  const flatbuffers::Vector<float> *Normals() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_NORMALS);
  }
  const flatbuffers::Vector<float> *Tangents() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_TANGENTS);
  }
  const flatbuffers::Vector<float> *Binormals() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_BINORMALS);
  }
  const flatbuffers::Vector<uint8_t> *Colors0() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_COLORS0);
  }
  const flatbuffers::Vector<uint8_t> *Colors1() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_COLORS1);
  }
  const flatbuffers::Vector<uint8_t> *Colors2() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_COLORS2);
  }
  const flatbuffers::Vector<uint8_t> *Colors3() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_COLORS3);
  }
  const flatbuffers::Vector<uint8_t> *Colors4() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_COLORS4);
  }
  const flatbuffers::Vector<uint8_t> *Colors5() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_COLORS5);
  }
  const flatbuffers::Vector<uint8_t> *Colors6() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_COLORS6);
  }
  const flatbuffers::Vector<uint8_t> *Colors7() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_COLORS7);
  }
  const flatbuffers::Vector<float> *TexCoords0() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_TEXCOORDS0);
  }
  const flatbuffers::Vector<float> *TexCoords1() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_TEXCOORDS1);
  }
  const flatbuffers::Vector<float> *TexCoords2() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_TEXCOORDS2);
  }
  const flatbuffers::Vector<float> *TexCoords3() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_TEXCOORDS3);
  }
  const flatbuffers::Vector<float> *TexCoords4() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_TEXCOORDS4);
  }
  const flatbuffers::Vector<float> *TexCoords5() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_TEXCOORDS5);
  }
  const flatbuffers::Vector<float> *TexCoords6() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_TEXCOORDS6);
  }
  const flatbuffers::Vector<float> *TexCoords7() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_TEXCOORDS7);
  }
  const flatbuffers::Vector<uint32_t> *Indices() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_INDICES);
  }
  const flatbuffers::Vector<uint8_t> *BoneIndices() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_BONEINDICES);
  }
  const flatbuffers::Vector<uint8_t> *BoneWeights() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_BONEWEIGHTS);
  }
  const flatbuffers::Vector<float> *BoneTransforms() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_BONETRANSFORMS);
  }
  const flatbuffers::Vector<uint8_t> *BoneParents() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_BONEPARENTS);
  }
  uint32_t MaterialIndex() const {
    return GetField<uint32_t>(VT_MATERIALINDEX, 0);
  }
  uint32_t TexCoord_Dimension() const {
    return GetField<uint32_t>(VT_TEXCOORD_DIMENSION, 2);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<MGeo::Bounds>(verifier, VT_BOUNDINGBOX) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VERTICES) &&
           verifier.Verify(Vertices()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NORMALS) &&
           verifier.Verify(Normals()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TANGENTS) &&
           verifier.Verify(Tangents()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BINORMALS) &&
           verifier.Verify(Binormals()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_COLORS0) &&
           verifier.Verify(Colors0()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_COLORS1) &&
           verifier.Verify(Colors1()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_COLORS2) &&
           verifier.Verify(Colors2()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_COLORS3) &&
           verifier.Verify(Colors3()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_COLORS4) &&
           verifier.Verify(Colors4()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_COLORS5) &&
           verifier.Verify(Colors5()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_COLORS6) &&
           verifier.Verify(Colors6()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_COLORS7) &&
           verifier.Verify(Colors7()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEXCOORDS0) &&
           verifier.Verify(TexCoords0()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEXCOORDS1) &&
           verifier.Verify(TexCoords1()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEXCOORDS2) &&
           verifier.Verify(TexCoords2()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEXCOORDS3) &&
           verifier.Verify(TexCoords3()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEXCOORDS4) &&
           verifier.Verify(TexCoords4()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEXCOORDS5) &&
           verifier.Verify(TexCoords5()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEXCOORDS6) &&
           verifier.Verify(TexCoords6()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEXCOORDS7) &&
           verifier.Verify(TexCoords7()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_INDICES) &&
           verifier.Verify(Indices()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BONEINDICES) &&
           verifier.Verify(BoneIndices()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BONEWEIGHTS) &&
           verifier.Verify(BoneWeights()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BONETRANSFORMS) &&
           verifier.Verify(BoneTransforms()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BONEPARENTS) &&
           verifier.Verify(BoneParents()) &&
           VerifyField<uint32_t>(verifier, VT_MATERIALINDEX) &&
           VerifyField<uint32_t>(verifier, VT_TEXCOORD_DIMENSION) &&
           verifier.EndTable();
  }
};

struct MeshBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_BoundingBox(const MGeo::Bounds *BoundingBox) {
    fbb_.AddStruct(Mesh::VT_BOUNDINGBOX, BoundingBox);
  }
  void add_Vertices(flatbuffers::Offset<flatbuffers::Vector<float>> Vertices) {
    fbb_.AddOffset(Mesh::VT_VERTICES, Vertices);
  }
  void add_Normals(flatbuffers::Offset<flatbuffers::Vector<float>> Normals) {
    fbb_.AddOffset(Mesh::VT_NORMALS, Normals);
  }
  void add_Tangents(flatbuffers::Offset<flatbuffers::Vector<float>> Tangents) {
    fbb_.AddOffset(Mesh::VT_TANGENTS, Tangents);
  }
  void add_Binormals(flatbuffers::Offset<flatbuffers::Vector<float>> Binormals) {
    fbb_.AddOffset(Mesh::VT_BINORMALS, Binormals);
  }
  void add_Colors0(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Colors0) {
    fbb_.AddOffset(Mesh::VT_COLORS0, Colors0);
  }
  void add_Colors1(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Colors1) {
    fbb_.AddOffset(Mesh::VT_COLORS1, Colors1);
  }
  void add_Colors2(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Colors2) {
    fbb_.AddOffset(Mesh::VT_COLORS2, Colors2);
  }
  void add_Colors3(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Colors3) {
    fbb_.AddOffset(Mesh::VT_COLORS3, Colors3);
  }
  void add_Colors4(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Colors4) {
    fbb_.AddOffset(Mesh::VT_COLORS4, Colors4);
  }
  void add_Colors5(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Colors5) {
    fbb_.AddOffset(Mesh::VT_COLORS5, Colors5);
  }
  void add_Colors6(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Colors6) {
    fbb_.AddOffset(Mesh::VT_COLORS6, Colors6);
  }
  void add_Colors7(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Colors7) {
    fbb_.AddOffset(Mesh::VT_COLORS7, Colors7);
  }
  void add_TexCoords0(flatbuffers::Offset<flatbuffers::Vector<float>> TexCoords0) {
    fbb_.AddOffset(Mesh::VT_TEXCOORDS0, TexCoords0);
  }
  void add_TexCoords1(flatbuffers::Offset<flatbuffers::Vector<float>> TexCoords1) {
    fbb_.AddOffset(Mesh::VT_TEXCOORDS1, TexCoords1);
  }
  void add_TexCoords2(flatbuffers::Offset<flatbuffers::Vector<float>> TexCoords2) {
    fbb_.AddOffset(Mesh::VT_TEXCOORDS2, TexCoords2);
  }
  void add_TexCoords3(flatbuffers::Offset<flatbuffers::Vector<float>> TexCoords3) {
    fbb_.AddOffset(Mesh::VT_TEXCOORDS3, TexCoords3);
  }
  void add_TexCoords4(flatbuffers::Offset<flatbuffers::Vector<float>> TexCoords4) {
    fbb_.AddOffset(Mesh::VT_TEXCOORDS4, TexCoords4);
  }
  void add_TexCoords5(flatbuffers::Offset<flatbuffers::Vector<float>> TexCoords5) {
    fbb_.AddOffset(Mesh::VT_TEXCOORDS5, TexCoords5);
  }
  void add_TexCoords6(flatbuffers::Offset<flatbuffers::Vector<float>> TexCoords6) {
    fbb_.AddOffset(Mesh::VT_TEXCOORDS6, TexCoords6);
  }
  void add_TexCoords7(flatbuffers::Offset<flatbuffers::Vector<float>> TexCoords7) {
    fbb_.AddOffset(Mesh::VT_TEXCOORDS7, TexCoords7);
  }
  void add_Indices(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> Indices) {
    fbb_.AddOffset(Mesh::VT_INDICES, Indices);
  }
  void add_BoneIndices(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> BoneIndices) {
    fbb_.AddOffset(Mesh::VT_BONEINDICES, BoneIndices);
  }
  void add_BoneWeights(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> BoneWeights) {
    fbb_.AddOffset(Mesh::VT_BONEWEIGHTS, BoneWeights);
  }
  void add_BoneTransforms(flatbuffers::Offset<flatbuffers::Vector<float>> BoneTransforms) {
    fbb_.AddOffset(Mesh::VT_BONETRANSFORMS, BoneTransforms);
  }
  void add_BoneParents(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> BoneParents) {
    fbb_.AddOffset(Mesh::VT_BONEPARENTS, BoneParents);
  }
  void add_MaterialIndex(uint32_t MaterialIndex) {
    fbb_.AddElement<uint32_t>(Mesh::VT_MATERIALINDEX, MaterialIndex, 0);
  }
  void add_TexCoord_Dimension(uint32_t TexCoord_Dimension) {
    fbb_.AddElement<uint32_t>(Mesh::VT_TEXCOORD_DIMENSION, TexCoord_Dimension, 2);
  }
  MeshBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MeshBuilder &operator=(const MeshBuilder &);
  flatbuffers::Offset<Mesh> Finish() {
    const auto end = fbb_.EndTable(start_, 28);
    auto o = flatbuffers::Offset<Mesh>(end);
    return o;
  }
};

inline flatbuffers::Offset<Mesh> CreateMesh(
    flatbuffers::FlatBufferBuilder &_fbb,
    const MGeo::Bounds *BoundingBox = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> Vertices = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> Normals = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> Tangents = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> Binormals = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Colors0 = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Colors1 = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Colors2 = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Colors3 = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Colors4 = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Colors5 = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Colors6 = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> Colors7 = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> TexCoords0 = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> TexCoords1 = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> TexCoords2 = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> TexCoords3 = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> TexCoords4 = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> TexCoords5 = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> TexCoords6 = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> TexCoords7 = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> Indices = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> BoneIndices = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> BoneWeights = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> BoneTransforms = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> BoneParents = 0,
    uint32_t MaterialIndex = 0,
    uint32_t TexCoord_Dimension = 2) {
  MeshBuilder builder_(_fbb);
  builder_.add_TexCoord_Dimension(TexCoord_Dimension);
  builder_.add_MaterialIndex(MaterialIndex);
  builder_.add_BoneParents(BoneParents);
  builder_.add_BoneTransforms(BoneTransforms);
  builder_.add_BoneWeights(BoneWeights);
  builder_.add_BoneIndices(BoneIndices);
  builder_.add_Indices(Indices);
  builder_.add_TexCoords7(TexCoords7);
  builder_.add_TexCoords6(TexCoords6);
  builder_.add_TexCoords5(TexCoords5);
  builder_.add_TexCoords4(TexCoords4);
  builder_.add_TexCoords3(TexCoords3);
  builder_.add_TexCoords2(TexCoords2);
  builder_.add_TexCoords1(TexCoords1);
  builder_.add_TexCoords0(TexCoords0);
  builder_.add_Colors7(Colors7);
  builder_.add_Colors6(Colors6);
  builder_.add_Colors5(Colors5);
  builder_.add_Colors4(Colors4);
  builder_.add_Colors3(Colors3);
  builder_.add_Colors2(Colors2);
  builder_.add_Colors1(Colors1);
  builder_.add_Colors0(Colors0);
  builder_.add_Binormals(Binormals);
  builder_.add_Tangents(Tangents);
  builder_.add_Normals(Normals);
  builder_.add_Vertices(Vertices);
  builder_.add_BoundingBox(BoundingBox);
  return builder_.Finish();
}

inline flatbuffers::Offset<Mesh> CreateMeshDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const MGeo::Bounds *BoundingBox = 0,
    const std::vector<float> *Vertices = nullptr,
    const std::vector<float> *Normals = nullptr,
    const std::vector<float> *Tangents = nullptr,
    const std::vector<float> *Binormals = nullptr,
    const std::vector<uint8_t> *Colors0 = nullptr,
    const std::vector<uint8_t> *Colors1 = nullptr,
    const std::vector<uint8_t> *Colors2 = nullptr,
    const std::vector<uint8_t> *Colors3 = nullptr,
    const std::vector<uint8_t> *Colors4 = nullptr,
    const std::vector<uint8_t> *Colors5 = nullptr,
    const std::vector<uint8_t> *Colors6 = nullptr,
    const std::vector<uint8_t> *Colors7 = nullptr,
    const std::vector<float> *TexCoords0 = nullptr,
    const std::vector<float> *TexCoords1 = nullptr,
    const std::vector<float> *TexCoords2 = nullptr,
    const std::vector<float> *TexCoords3 = nullptr,
    const std::vector<float> *TexCoords4 = nullptr,
    const std::vector<float> *TexCoords5 = nullptr,
    const std::vector<float> *TexCoords6 = nullptr,
    const std::vector<float> *TexCoords7 = nullptr,
    const std::vector<uint32_t> *Indices = nullptr,
    const std::vector<uint8_t> *BoneIndices = nullptr,
    const std::vector<uint8_t> *BoneWeights = nullptr,
    const std::vector<float> *BoneTransforms = nullptr,
    const std::vector<uint8_t> *BoneParents = nullptr,
    uint32_t MaterialIndex = 0,
    uint32_t TexCoord_Dimension = 2) {
  return MGeo::CreateMesh(
      _fbb,
      BoundingBox,
      Vertices ? _fbb.CreateVector<float>(*Vertices) : 0,
      Normals ? _fbb.CreateVector<float>(*Normals) : 0,
      Tangents ? _fbb.CreateVector<float>(*Tangents) : 0,
      Binormals ? _fbb.CreateVector<float>(*Binormals) : 0,
      Colors0 ? _fbb.CreateVector<uint8_t>(*Colors0) : 0,
      Colors1 ? _fbb.CreateVector<uint8_t>(*Colors1) : 0,
      Colors2 ? _fbb.CreateVector<uint8_t>(*Colors2) : 0,
      Colors3 ? _fbb.CreateVector<uint8_t>(*Colors3) : 0,
      Colors4 ? _fbb.CreateVector<uint8_t>(*Colors4) : 0,
      Colors5 ? _fbb.CreateVector<uint8_t>(*Colors5) : 0,
      Colors6 ? _fbb.CreateVector<uint8_t>(*Colors6) : 0,
      Colors7 ? _fbb.CreateVector<uint8_t>(*Colors7) : 0,
      TexCoords0 ? _fbb.CreateVector<float>(*TexCoords0) : 0,
      TexCoords1 ? _fbb.CreateVector<float>(*TexCoords1) : 0,
      TexCoords2 ? _fbb.CreateVector<float>(*TexCoords2) : 0,
      TexCoords3 ? _fbb.CreateVector<float>(*TexCoords3) : 0,
      TexCoords4 ? _fbb.CreateVector<float>(*TexCoords4) : 0,
      TexCoords5 ? _fbb.CreateVector<float>(*TexCoords5) : 0,
      TexCoords6 ? _fbb.CreateVector<float>(*TexCoords6) : 0,
      TexCoords7 ? _fbb.CreateVector<float>(*TexCoords7) : 0,
      Indices ? _fbb.CreateVector<uint32_t>(*Indices) : 0,
      BoneIndices ? _fbb.CreateVector<uint8_t>(*BoneIndices) : 0,
      BoneWeights ? _fbb.CreateVector<uint8_t>(*BoneWeights) : 0,
      BoneTransforms ? _fbb.CreateVector<float>(*BoneTransforms) : 0,
      BoneParents ? _fbb.CreateVector<uint8_t>(*BoneParents) : 0,
      MaterialIndex,
      TexCoord_Dimension);
}

struct Model FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "MGeo.Model";
  }
  enum {
    VT_VERSION = 4,
    VT_MESHES = 6,
    VT_MATERIALS = 8,
    VT_BOUNDINGBOX = 10
  };
  MeshVersion Version() const {
    return static_cast<MeshVersion>(GetField<uint16_t>(VT_VERSION, 1));
  }
  const flatbuffers::Vector<flatbuffers::Offset<Mesh>> *Meshes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Mesh>> *>(VT_MESHES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MGeo::Material>> *Materials() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MGeo::Material>> *>(VT_MATERIALS);
  }
  const MGeo::Bounds *BoundingBox() const {
    return GetStruct<const MGeo::Bounds *>(VT_BOUNDINGBOX);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_VERSION) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MESHES) &&
           verifier.Verify(Meshes()) &&
           verifier.VerifyVectorOfTables(Meshes()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MATERIALS) &&
           verifier.Verify(Materials()) &&
           verifier.VerifyVectorOfTables(Materials()) &&
           VerifyField<MGeo::Bounds>(verifier, VT_BOUNDINGBOX) &&
           verifier.EndTable();
  }
};

struct ModelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Version(MeshVersion Version) {
    fbb_.AddElement<uint16_t>(Model::VT_VERSION, static_cast<uint16_t>(Version), 1);
  }
  void add_Meshes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Mesh>>> Meshes) {
    fbb_.AddOffset(Model::VT_MESHES, Meshes);
  }
  void add_Materials(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MGeo::Material>>> Materials) {
    fbb_.AddOffset(Model::VT_MATERIALS, Materials);
  }
  void add_BoundingBox(const MGeo::Bounds *BoundingBox) {
    fbb_.AddStruct(Model::VT_BOUNDINGBOX, BoundingBox);
  }
  ModelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ModelBuilder &operator=(const ModelBuilder &);
  flatbuffers::Offset<Model> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<Model>(end);
    return o;
  }
};

inline flatbuffers::Offset<Model> CreateModel(
    flatbuffers::FlatBufferBuilder &_fbb,
    MeshVersion Version = MeshVersion::CurrentMeshVersion,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Mesh>>> Meshes = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MGeo::Material>>> Materials = 0,
    const MGeo::Bounds *BoundingBox = 0) {
  ModelBuilder builder_(_fbb);
  builder_.add_BoundingBox(BoundingBox);
  builder_.add_Materials(Materials);
  builder_.add_Meshes(Meshes);
  builder_.add_Version(Version);
  return builder_.Finish();
}

inline flatbuffers::Offset<Model> CreateModelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    MeshVersion Version = MeshVersion::CurrentMeshVersion,
    const std::vector<flatbuffers::Offset<Mesh>> *Meshes = nullptr,
    const std::vector<flatbuffers::Offset<MGeo::Material>> *Materials = nullptr,
    const MGeo::Bounds *BoundingBox = 0) {
  return MGeo::CreateModel(
      _fbb,
      Version,
      Meshes ? _fbb.CreateVector<flatbuffers::Offset<Mesh>>(*Meshes) : 0,
      Materials ? _fbb.CreateVector<flatbuffers::Offset<MGeo::Material>>(*Materials) : 0,
      BoundingBox);
}

inline const MGeo::Model *GetModel(const void *buf) {
  return flatbuffers::GetRoot<MGeo::Model>(buf);
}

inline const char *ModelIdentifier() {
  return "MMBN";
}

inline bool ModelBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ModelIdentifier());
}

inline bool VerifyModelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MGeo::Model>(ModelIdentifier());
}

inline const char *ModelExtension() {
  return "mmesh";
}

inline void FinishModelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MGeo::Model> root) {
  fbb.Finish(root, ModelIdentifier());
}

}  // namespace MGeo

#endif  // FLATBUFFERS_GENERATED_MODEL_MGEO_H_
